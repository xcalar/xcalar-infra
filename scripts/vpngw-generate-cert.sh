#!/bin/bash

set -e

usage() {
    cat <<EOF
    usage: $0 [--email EMAIL] [--cn COMMON_NAME] [--template TEMPLATE] [--ttl TTL_SECONDS]

EOF
}

die() {
    echo >&2 "ERROR: $1"
    exit ${2:-1}
}


main() {
    OVPN_TEMPLATE=${OVPN_TEMPLATE:-/netstore/infra/vpn/azure-p2s/xcalardev-vpngw.ovpn}
    OVPN_CA=${OVPN_CA:-xcalar_ca_int_vault}
    OVPN_ROLE=${OVPN_ROLE:-int-xcalar-com}

    EMAIL=''
    CN=''
    TTL='15552000' # 180 days in seconds

    while [ $# -gt 0 ]; do
        local cmd="$1"
        shift
        case "$cmd" in
            --email) EMAIL="$1"; shift;;
            --cn) CN="$1"; shift;;
            --template) OVPN_TEMPLATE="$1"; shift;;
            --ttl) TTL="$1"; shift;;
            -h|--help) usage; exit 0;;
            *) echo >&2 "ERROR: Unknown argument $cmd"; usage >&2; exit 1;;
        esac
    done

    if [ -z "${CN:-}" ]; then
        die "Must specify --email and --cn"
    fi
    if [ -z "${EMAIL:-}" ]; then
        EMAIL="${CN}@xcalar.com"
    fi

    OVPN_DIR=$(dirname $OVPN_TEMPLATE)

    test -d ${OVPN_DIR}/keys || mkdir -m 0700 ${OVPN_DIR}/keys || die "Couldn't write to $OVPN_DIR"
    test -d ${OVPN_DIR}/certs || mkdir -m 0755 ${OVPN_DIR}/certs || die "Couldn't write to $OVPN_DIR"
    test -d ${OVPN_DIR}/ovpn || mkdir -m 0700 ${OVPN_DIR}/ovpn || die "Couldn't write to $OVPN_DIR"

    CERT=${OVPN_DIR}/certs/${CN}.crt
    PKEY=${OVPN_DIR}/keys/${CN}.key
    OVPN=${OVPN_DIR}/ovpn/${CN}-$(basename $OVPN_TEMPLATE .ovpn).ovpn
    if test -e "$OVPN"; then
        echo >&2 "OpenVPN profile already exists in"
        echo "$OVPN"
        exit 0
    fi

    if [ -z "$CERTJSON" ]; then
        CERTJSON=$(mktemp -t tempXXXXXX) || exit 1
        trap "rm -f $CERTJSON" EXIT
        if ! vault write -format=json $OVPN_CA/issue/$OVPN_ROLE common_name="$CN" alt_names="${CN},${EMAIL}" ttl="$TTL" > $CERTJSON; then
            die "Failed to generate vault cert"
        fi
    fi

    touch "$CERT" "$PKEY" || die "Failed to write to $CERT or $PKEY"

    jq -r '.data.certificate,.data.issuing_ca' < $CERTJSON > $CERT \
      && jq -r '.data.private_key' < $CERTJSON > $PKEY

    cat <<XEOF > $OVPN
##
## Generated by $USER@$HOSTNAME on $(date +%Y%m%d-%H%M%S) on $(hostname) for $CN ($EMAIL) with TTL=$TTL
##
$(cat $OVPN_TEMPLATE)
# P2S client certificate
# Please fill this field with a PEM formatted client certificate
# Alternatively, configure 'cert PATH_TO_CLIENT_CERT' to use input from a PEM certificate file.
<cert>
$(cat $CERT)
</cert>

# P2S client certificate private key
# Please fill this field with a PEM formatted private key of the client certificate.
# Alternatively, configure 'key PATH_TO_CLIENT_KEY' to use input from a PEM key file.
<key>
$(cat $PKEY)
</key>
XEOF
    echo "$OVPN"
}

main "$@"
