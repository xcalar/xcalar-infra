#!/bin/bash

#
# This script is to be run on a new developer VM.
# The user who wishes to set up a dev vm, needs to ssh in to the dev vm,
# from their normal workstation, and run this script.
#
# usage: ./dev_vm_setup.sh gerrit-username [true]
#
# args to script:
#   $1 (required): gerrit username for user who will be owning the git repos
#   $2 (optional): if true, will build frontend and backend and start Xcalar via launcher, at end of script.
#
# The gerrit user must have an SSH key already associated with their gerrit username.
# They must have SSH'd in to this VM, from one of those machines, in order
# to have sufficient privliges to check out the git repos.

set -e

SCRIPT_PATH="$(readlink -f ${BASH_SOURCE[0]})"
SCRIPT_NAME="$(basename "$0")"

XLRDIR="$HOME"/xcalar
XLRGUIDIR="$HOME"/xcalar-gui
XLRINFRADIR="$HOME"/xcalar-infra

line_break="--------------------------" # for printing in summary at end of script
extra_summary="" # add conditional instructions here to print in summary at end of script

build_backend_cmd='cd $XLRDIR && xcsetenv && git submodule update && cmBuild clean && cmBuild config debug && cmBuild xce'
build_backend_alias_name='xcalar-backend'
build_frontend_cmd='cd $XLRGUIDIR && make trunk'
build_frontend_alias_name='xcalar-frontend'
launcher_cmd='cd $XLRDIR && $XLRDIR/src/bin/usrnode/launcher.sh 1 daemon'
launcher_alias_name='xcalar-launcher'

###  get vars to script ###

usage_err="
Incorrect script args!
Usage: ./$SCRIPT_NAME <gerrit username> <xcalar email> [true|false]

(the optional third arg indicates if you want script to build Xcalar
 for you once setup is complete.)
"

gerrit_username=""
if [ -z "$1" ]; then
    echo "$usage_err" >&2
    exit 1
else
    gerrit_username="$1"
fi

xcalar_email=""
if [ -z "$2" ]; then
    echo "$usage_err" >&2
    exit 1
else
    xcalar_email="$2"
fi

launch_xd_at_end="false"
if [ "$3" == "true" ]; then
    launch_xd_at_end="true"
fi

## important - clear out the positional args to this script now that you have them;
## will source scripts later on that look for positional args themselves,
## if they get the args to this script, they will fail!
set --

### SETUP /.ssh/config to use their gerrit username when checking out git repos ###

echo "Setting up /.ssh/config to user gerrit username $gerrit_username when checking out git repos..." >&2

ssh_config_file="$HOME/.ssh/config"
ssh_config_dir="$(dirname $ssh_config_file)"
mkdir -p "$ssh_config_dir"
chmod 0700 "$ssh_config_dir"
touch "$ssh_config_file"

# will add this line to ~/.ssh/config
ssh_config_add="Host gerrit gerrit.int.xcalar.com
   User $gerrit_username
   Hostname gerrit.int.xcalar.com"
# check if this line already in ~/.ssh/config before adding in
if ! grep -Fq "$ssh_config_add" "$ssh_config_file"; then
    echo "$ssh_config_add" >> "$ssh_config_file"
fi
# git clone will fail if ~/.ssh/config not set with these permissions
chmod 600 "$HOME"/.ssh/config

### CHECK OUT GIT REPOS ###

# main XCE
echo "Checking out xcalar repo..." >&2
mkdir -p "$XLRDIR"
if cd "$XLRDIR" && git status >/dev/null 2>&1; then
    echo "Already a git repo at $XLRDIR" >&2
else
    cd "$HOME"
    git clone --recurse-submodules -o gerrit ssh://gerrit.int.xcalar.com:29418/xcalar.git "$XLRDIR"
    echo "done"
fi

# xcalar-gui project
echo "Checking out xcalar-gui repo..." >&2
mkdir -p "$XLRGUIDIR"
if cd "$XLRGUIDIR" && git status >/dev/null 2>&1; then
    echo "Already a git repo at $XLRGUIDIR"
else
    cd "$HOME"
    git clone --recurse-submodules -o gerrit ssh://gerrit.int.xcalar.com:29418/xcalar/xcalar-gui.git "$XLRGUIDIR"
    echo "done"
fi

#xcalar-infra project
echo "Checking out xcalar-infra repo..." >&2
mkdir -p "$XLRINFRADIR"
if cd "$XLRINFRADIR" && git status >/dev/null 2>&1; then
    echo "Already a git repo at $XLRINFRADIR"
else
    cd "$HOME"
    git clone --recurse-submodules -o gerrit ssh://gerrit.int.xcalar.com:29418/xcalar/xcalar-infra.git "$XLRINFRADIR"
    echo "done"
fi

# set git config
git config --global user.name "$gerrit_username"
git config --global user.email "$xcalar_email"
git config --global include.path "$XLRDIR"/doc/env/dot_gitconfig

#### SETUP STANDARD BASH ENV ####
#### (this will put VM user in xcve in each new shell) ###

# create a script that bashrc will source
setup_script_path="$HOME"/.dev_setup_script.sh

#overwrite existing one on machine each time you run this script in case
#this section changes
cat << EOF > "$setup_script_path"
#
# this script was generated by a run of: $SCRIPT_PATH
#
# envrionment variables pointing to the cloned repos
export XLRDIR=$XLRDIR
export XLRGUIDIR=$XLRGUIDIR
export XLRINFRADIR=$XLRINFRADIR
# reset your PATH to something sane
export PATH=/usr/local/bin:/usr/local/sbin:/usr/sbin:/usr/bin:/sbin:/bin:\$HOME/bin
# this will put xcalar python in your path
export PATH=\$PATH:/opt/xcalar/bin
# this will allow you to call 'grunt' directly (for front-end developers)
export PATH=\$PATH:\$XLRGUIDIR/node_modules/.bin
# this will allow you to xcalar-infra tools directly
export PATH=\$PATH:\$XLRINFRADIR/bin
# this will let you call 'cmBuild' directly
export PATH=\$XLRDIR/bin:\$PATH
# set this only if you need to develop the expServer and start it by hand; if you start the expServer via launcher it would take care of this
export XCE_CONFIG=\$XLRDIR/src/data/test.cfg
# these lines will start up our python virtual environment
# on any new shell session (each time you ssh in to the VM, for example.)
# this will ensure you are using the correct Xcalar python version
cd \$XLRDIR && source bin/xcsetenv && cd - >/dev/null # sourcing xcsetenv will switch your cwd
# use these aliases for building the backend, frontend, and launching xcalar
alias $build_backend_alias_name='$build_backend_cmd'
alias $build_frontend_alias_name='$build_frontend_cmd'
alias $launcher_alias_name='$launcher_cmd'
EOF

autogen_comment_bashrc="This section of .bashrc was generated by:"
# write this line only if it's not there already (in case running this script multiple times)
if ! grep -Fq "$autogen_comment_bashrc" "$HOME"/.bashrc; then
    echo "Setting up your ~/.bashrc and getting in an xcve env" >&2
    cat << EOF >> "$HOME"/.bashrc

# $autogen_comment_bashrc $SCRIPT_PATH
test -f $setup_script_path && . $setup_script_path
test -f ~/.bash_aliases && . ~/.bash_aliases || true
# done with section of .bashrc generated by $SCRIPT_PATH

EOF

    # This is the initial add of this data to .bashrc; when .bashrc gets sourced below,
    # user go in to xcenv for the first time (via xcsetenv part),
    # but they won't still be in xcenv when this shell script ends.
    # add an extra instruction to the user at the end of the shell script
    # so they will know to log out and log back in to the VM this first time.
    # (Now that it's in .bashrc, they will enter xcenv each time they enter a new shell).
    extra_summary="$extra_summary
$line_break

Please LOG OUT and LOG IN to your VM one final time
to get your current shell in the proper python env,
or simply run :  source ~/.bashrc
Going forward, each time you log in to your VM, you will
be put in the proper python environment!
"
fi

source "$HOME"/.bashrc # this should put you in an xcve env!

#### DIRECTORIES NEEDED BY LAUNCHER, WITH CORRECT OWNERSHIP #########

echo "Setup dirs needed by launcher" >&2
sudo mkdir -p /var/log/xcalar && sudo chown "$(id -u)":"$(id -g)" /var/log/xcalar
sudo mkdir -p /var/opt/xcalar && sudo chown "$(id -u)":"$(id -g)" /var/opt/xcalar
sudo mkdir -p /mnt/xcalar && sudo chown "$(id -u)":"$(id -g)" /mnt/xcalar

#### SYMLINKS TO XCALAR-GUI (symlinks will be broken until xcalar-gui project is built ###

echo "Symlink xcalar-gui builds that caddy will point to when you're running XD" >&2
sudo mkdir -p /var/www/
sudo chown $(id -u):$(id -g) /var/www
ln -sfn "$XLRGUIDIR"/xcalar-gui /var/www/xcalar-gui >/dev/null 2>&1 || true # in case already exists

#### LIB NEEDED FOR GERRIT REVIEWS (do after xcve set up so you're getting correct pip) ###

echo "Install libs needed for gerrit reviews" >&2
pip install -U git-review

### GDB CONFIGURATION ###
ln -sfn "$XLRDIR"/.gdbinit "$HOME"/.gdbinit

### JUPYTER CONFIGURATION ###
ln -sfn "$XLRGUIDIR"/assets/jupyter/jupyter "$HOME"/.jupyter
ln -sfn "$XLRGUIDIR"/assets/jupyter/ipython "$HOME"/.ipython
mkdir -p "$HOME"/jupyterNotebooks

### BUILD PROJECTS IF REQUESTED! ###

if [ "$launch_xd_at_end" == "true" ]; then
    echo "Building xcalar backend..." >&2
    eval "$build_backend_cmd"
    echo "done"

    echo "Building xcalar frontend..." >&2
    eval "$build_frontend_cmd"
    echo "done"

    echo "Running launcher..." >&2
    eval "$launcher_cmd"
    echo "done"

    extra_summary="$extra_summary
$line_break

Xcalar has been built and launched! Go here, and
log in to XD with the credentials: admin / admin

 https://$(hostname -f)
"
fi

### SUMMARY! ###

cat <<EOF

$line_break

Setup is complete!

xcalar (backend) git repo:
  $XLRDIR

xcalar-gui (frontend) git repo:
  $XLRGUIDIR

xcalar-infra (tools, infra) git repo:
  $XLRINFRADIR

$line_break

To manually build and run Xcalar from your git repos, do the following:
(Note: the following commands are bash aliases; run 'source ~/.bashrc' if this is
your first time running this script, to make them available in your current shell.)

(1) Build the backend:

     $build_backend_alias_name

(2) Build the frontend:

     $build_frontend_alias_name

(3) Run launcher:
    (If you have already run launcher, this will kill the existing
     process before launching a new one.)

     $launcher_alias_name

(*note: the bash aliases above are defined in $setup_script_path)
$extra_summary
$line_break
EOF
