---
AWSTemplateFormatVersion: "2010-09-09"
Transform: "AWS::Serverless-2016-10-31"

Globals:
  Function:
    Runtime: python3.6
    Timeout: 60
    Handler: index.handler
    Layers:
      - !FindInMap [SourceCode, !Ref 'AWS::Region', Layer]
    Environment:
      Variables:
        StackName: !Ref 'AWS::StackName'
        Region: !Ref 'AWS::Region'
        StackId: !Ref 'AWS::StackId'
        ParentStack: !Ref 'ParentStack'

Mappings:
  SourceCode:
    'us-west-2':
      Layer: ''
Resources:
  SamScheduleManager:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: schedule.update_handler
      Runtime: python3.6
      CodeUri: ./lambda
      Policies:
        - LambdaInvokePolicy: {}
        - S3CrudPolicy:
            BucketName: !Ref EventBucket
        - CloudFormationDescribeStacksPolicy: {}
        - EC2DescribePolicy: {}
        - StepFunctionsExecutionPolicy:
            StateMachineName: !Ref DataAppStateMachine
        - SSMParameterReadPolicy:
            ParameterName: '/xcalar/cloud/'
      Events:
        BucketEvent1:
          Type: S3
          Properties:
            Bucket: !Ref EventBucket
            Filter:
              S3Key:
                Rules:
                  - Name: prefix
                    Value: !Ref EventPrefix
                  - Name: suffix
                    Value: '.json'
            Events:
              - 's3:ObjectCreated:*'
              - 's3:ObjectRemoved:*'
  SamScheduleManagerLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${SamScheduleManager}

  Ec2SSMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - sts:AssumeRole
            Principal:
              Service:
                - ec2.amazonaws.com
            Effect: Allow
      Path: "/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      Policies:
        - PolicyName: "Ec2ProxyClusterPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "kms:DescribeCustomKeyStores"
                  - "kms:ListKeys"
                  - "kms:Decrypt"
                  - "kms:DescribeKey"
                  - "kms:ConnectCustomKeyStore"
                  - "kms:ListGrants"
                  - "ec2:DescribeInstances"
                  - "cloudformation:DescribeStackResource*"
                  - "autoscaling:DescribeAutoScalingGroups"
                  - "elasticfilesystem:DescribeMountTargets"
                  - "autoscaling:CompleteLifecycleAction"
                  - s3:GetBucketLocation
                Resource: "*"
              - Effect: "Allow"
                Action:
                  - s3:ListBucket
                Resource:
                  - !Sub "arn:aws:s3:::${ExistingBucket}"
                  - !Sub "arn:aws:s3:::${WorkBucket}"
                  - !Sub "arn:aws:s3:::${EventBucket}"
              - Effect: "Allow"
                Action:
                  - 's3:GetObject'
                  - "s3:PutObject"
                  - s3:AbortMultipartUpload
                  - s3:ListMultipartUploadParts
                  - s3:DeleteObject
                Resource:
                  - !Sub "arn:aws:s3:::${ExistingBucket}/*"
                  - !Sub "arn:aws:s3:::${WorkBucket}/*"

Metadata:
  AWS::ServerlessRepo::Application:
    Name: xcalar-export-scheduler
    Description: >
      Configures and schedules batch export from Xcalar to S3
    Author: Xcalar Inc
    SpdxLicenseId: APL2
    LicenseUrl: LICENSE.txt
    ReadmeUrl: README-SAR.md
    Labels: ['xcalar', 'scheduler', 'lambda', 'exports', 'etl']
    HomePageUrl: https://xcalar.com
    SemanticVersion: 1.0.0
    SourceCodeUrl: https://github.com/xcalarinc/xcalar-export-scheduler

# vim: ft=yaml.cloudformation
