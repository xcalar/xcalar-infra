AWSTemplateFormatVersion: '2010-09-09'
Description: Xcalar Data Platform. This template deploys a XDP Cluster to AWS
Parameters:
  InstanceType:
    Type: String
    Description: Xcalar node instance type
    ConstraintDescription: Choose an instance type.
    Default: '{{ instance_default | default("r5d.xlarge") }}'
    AllowedValues: {{ instance_types }}
    {#  {% for instance_type in instance_types -%}
    #  - {{ instance_type }}
    #  {%- endfor %} #}
{%- if createVpc %}
  KeyName:
    Description: (Optional) Name of an existing EC2 KeyPair to enable SSH access to the instances
    Type: String
    Default: 'xcalar-us-west-2'
  VpcCidr:
    Type: String
    MinLength: 9
    MaxLength: 18
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: Must be a valid CIDR range in the form x.x.x.x/16
    Default: 10.20.0.0/16
  SharedACidr:
    Type: String
    MinLength: 9
    MaxLength: 18
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: Must be a valid CIDR range in the form x.x.x.x/22
    Default: 10.20.0.0/22
{%- else %}
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instances
    Type: AWS::EC2::KeyPair::KeyName
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: VPC to use for cluster placement (vpc-xxxxxx)
  Subnet:
    Type: AWS::EC2::Subnet::Id
    Description: ID of the private subnet of your VPC (subnet-xxxxxxxx)
{%- endif %}
  AllowedCIDR:
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x.
    Description: >-
      Enter the CIDR Block that should have access to this cluster. If unsure, use 0.0.0.0/0 to allow
      access from anywhere. You can also enter a specific IP address in the form of 72.22.33.44/32 (this could be your Work or Home IP).
    Type: String
    MinLength: 9
    MaxLength: 18
    Default: '0.0.0.0/0'
  AssociatePublicIpAddress:
    Description: Associate a Public IP address with each instance
    Default: 'true'
    AllowedValues:
      - 'false'
      - 'true'
    Type: String
  AdminUsername:
    Description: Desired username of the XDP Administrator
    Type: String
    MinLength: 5
    MaxLength: 128
    Default: 'admin'
  AdminPassword:
    Description: Password for the XDP Administrator
    NoEcho: true
    Type: String
    MinLength: 5
    MaxLength: 128
    Default: 'Welcome1'
  ClusterSize:
    Description: Desired cluster size (number of instances)
    MinValue: 0
    MaxValue: 32
    Default: 1
    Type: Number
  RootSize:
    Description: Size of Root Disk in GB
    MinValue: 32
    MaxValue: 4095
    Default: 64
    Type: Number
  ExistingShare:
    Description: Existing EFS Share (fs-xxxxxxxx), leave blank to create one
    Type: String
    Default: ''
  ExistingS3:
    Description: Existing S3 Bucket, leave blank to create one
    Type: String
    Default: ''
#  LatestAmiId:
#    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
#    Default: '/xcalar/cloud/images/xdp-base-standard/xdp-base-amzn2'
  ImageId:
    Description: 'AMI to use'
    Type: 'AWS::EC2::Image::Id'
    Default: '{{ ami_id }}'
  CNAME:
    Description: Desired CNAME of the instance without domain portion. Leave blank to skip assignment
    Type: String
    Default: ''
  Cgroups:
    Description: Enable cgroups
    Default: 'false'
    AllowedValues:
      - 'false'
      - 'true'
    Type: String
  SharedConfig:
    Description: Store cluster config on EFS
    Default: 'false'
    AllowedValues:
      - 'false'
      - 'true'
    Type: String
  SessionTable:
    Description: Authenticaton Session Table Name
    Type: String
    Default: 'saas-auth-session-table'
{%- if enableCloud %}
  AuthStackName:
    Description: Name of the cloud Auth stack being used for authentication
    Type: String
    Default: ''
  MainStackName:
    Description: Name of the cloud main stack being used for cluster, billing, s3, etc.
    Type: String
    Default: ''
{%- endif %}
{%- if enableLicense %}
  License:
    Description: XDP License Key
    Type: String
    Default: ''
{%- endif %}
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Xcalar Data Platform
        Parameters:
          - AdminUsername
          - AdminPassword
{%- if enableLicense %}
          - License
{%- endif %}
      - Label:
          default: Security Configuration
        Parameters:
          - AllowedCIDR
{%- if not createVpc %}
          - KeyName
{%- endif %}
      - Label:
          default: Cluster Configuration
        Parameters:
          - InstanceType
          - ClusterSize
      - Label:
          default: VPC/Network
        Parameters:
{%- if createVpc %}
          - VpcCidr
          - SharedACidr
{%- else %}
          - VpcId
          - Subnet
{%- endif %}
      - Label:
          default: Advanced Options
        Parameters:
          - RootSize
          - AssociatePublicIpAddress
          - ExistingShare
          - ExistingS3
{%- if createVpc %}
          - KeyName
{%- endif %}
    ParameterLabels:
{%- if enableLicense %}
      License:
        default: 'XCE License Key:'
{%- endif %}
      AdminUsername:
        default: 'XDP Administrator Username'
      AdminPassword:
        default: 'XDP Administrator Password'
      InstanceType:
        default: 'EC2 Instance Type'
      ClusterSize:
        default: 'Number of instances to launch'
      KeyName:
        default: 'SSH Key Pair'
      AllowedCIDR:
        default: 'Allow Access from CIDR Range'
{%- if createVpc %}
      VpcCidr:
        default: 'VPC CIDR Range'
      SharedACidr:
        default: 'Subnet CIDR Range'
{%- endif %}
Conditions:
  CreateNewShare: !Equals [!Ref ExistingShare, '']
  CreateNewS3: !Equals [!Ref ExistingS3, '']
  NoKeyName: !Equals [!Ref KeyName, '']
  NoInstances: !Equals [!Ref ClusterSize, '0']
  CreateInstances: !Not [!Equals [!Ref ClusterSize, '0']]
  IsUsEast1: !Equals [!Ref 'AWS::Region', 'us-east-1']
  CreateDNS: !Not [!Equals [!Ref CNAME, '' ]]
Mappings:
  # The AccountLUT (lookup-table) holds various bits of
  # static info for each account's deployment.
  AccountLUT:
    '043829555035':
      AccountName: 'xcalar-test'
      HostedZoneId: 'ZOHHT2AHYTDDN'
      HostedZoneName: 'test.xcalar.cloud'
      Failover: 'redirector.test.xcalar.cloud'
    '559166403383':
      AccountName: 'xcalar'
      HostedZoneId: 'ZM6YP51I9IZCW'
      HostedZoneName: 'xcalar.rocks'
      Failover: 'redirector.xcalar.rocks'
    '876030232190':
      AccountName: 'xcpegasus'
      HostedZoneId: 'Z3OAJRCVE57A0G'
      HostedZoneName: 'xcalar.cloud'
      Failover: 'redirector.xcalar.cloud'
Resources:
{%- if createVpc %}
  VpcId:
    Type: "AWS::EC2::VPC"
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsHostnames: true
      EnableDnsSupport: true
  IGW:
    Type: "AWS::EC2::InternetGateway"
  Subnet:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: !Select [0, !GetAZs ]
      CidrBlock: !Ref SharedACidr
      MapPublicIpOnLaunch: true
      VpcId: !Ref VpcId
  SubnetRouteTableAssociationPublic:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref RouteTablePublic
      SubnetId: !Ref Subnet
  RouteDefaultPublic:
    Type: "AWS::EC2::Route"
    DependsOn: [GatewayAttachment]
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref IGW
      RouteTableId: !Ref RouteTablePublic
  RouteTablePublic:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref VpcId
  GatewayAttachment:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      InternetGatewayId: !Ref IGW
      VpcId: !Ref VpcId
  S3Endpoint:
    Type: "AWS::EC2::VPCEndpoint"
    Properties:
      PolicyDocument:
        Statement:
          - Action: "*"
            Effect: Allow
            Resource: "*"
            Principal: "*"
      RouteTableIds:
        - !Ref RouteTablePublic
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.s3'
      VpcId: !Ref VpcId
{%- endif %}
  S3Bucket:
    Type: AWS::S3::Bucket
    Condition: CreateNewS3
{%- if retainPolicy %}
    DeletionPolicy: Retain
{%- endif %}
    Properties:
      AccessControl: Private
  ClusterSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access between nodes, and HTTPS/SSH from the given CIDR.
      VpcId: !Ref 'VpcId'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref 'AllowedCIDR'
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: !Ref 'AllowedCIDR'
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: !Ref 'AllowedCIDR'
        - IpProtocol: tcp
          FromPort: 10000
          ToPort: 10000
          CidrIp: !Ref 'AllowedCIDR'
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-ClusterSG'
  ClusterMonitorIngressTCP:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref 'ClusterSG'
      IpProtocol: tcp
      FromPort: 8000
      ToPort: 8000
      SourceSecurityGroupId: !Ref 'ClusterSG'
  ClusterMonitorIngressUDP:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref 'ClusterSG'
      IpProtocol: udp
      FromPort: 8000
      ToPort: 8000
      SourceSecurityGroupId: !Ref 'ClusterSG'
  ClusterIngressHTTP:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref 'ClusterSG'
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80
      SourceSecurityGroupId: !Ref 'ClusterSG'
  ClusterIngressSSL:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref 'ClusterSG'
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
      SourceSecurityGroupId: !Ref 'ClusterSG'
  ClusterIngressAPI:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref 'ClusterSG'
      IpProtocol: tcp
      FromPort: 18552
      ToPort: 18552
      SourceSecurityGroupId: !Ref 'ClusterSG'
  ClusterIngressProto:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref 'ClusterSG'
      IpProtocol: tcp
      FromPort: 5000
      ToPort: 5000
      SourceSecurityGroupId: !Ref 'ClusterSG'
  EfsSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: EFS Mount Access Security Group
      VpcId: !Ref 'VpcId'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 2049
          ToPort: 2049
          SourceSecurityGroupId: !Ref 'ClusterSG'
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-EfsSecurityGroup'
  EfsSharedRoot:
    Type: AWS::EFS::FileSystem
    Condition: CreateNewShare
{%- if retainPolicy %}
    DeletionPolicy: Retain
{%- endif %}
    Properties:
      Encrypted: false
      FileSystemTags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-EFS'
        - Key: StackName
          Value: !Ref 'AWS::StackName'
  EfsMountTarget:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !If [CreateNewShare, !Ref EfsSharedRoot, !Ref ExistingShare]
      SubnetId: !Ref 'Subnet'
      SecurityGroups:
        - !Ref 'EfsSecurityGroup'
  PlacementGroup:
    Type: AWS::EC2::PlacementGroup
    Properties:
      Strategy: cluster
  ClusterASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn: [EfsMountTarget]
    Properties:
      PlacementGroup: !Ref 'PlacementGroup'
      TerminationPolicies:
        - NewestInstance
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber
      MinSize: !Ref 'ClusterSize'
      MaxSize: !Ref 'ClusterSize'
      DesiredCapacity: !Ref 'ClusterSize'
      VPCZoneIdentifier:
        - !Ref 'Subnet'
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-node'
          PropagateAtLaunch: true
        - Key: FileSystemId
          Value: !If [CreateNewShare, !Ref EfsSharedRoot, !Ref ExistingShare]
          PropagateAtLaunch: true
        - Key: MountTarget
          Value: !Ref EfsMountTarget
          PropagateAtLaunch: true
    CreationPolicy:
      ResourceSignal:
        Count: !Ref 'ClusterSize'
        Timeout: PT10M
    # WillReplace: true, means a new ASG is stood up and the old one is replaced if the new stack comes up
    UpdatePolicy:
      AutoScalingReplacingUpdate:
        WillReplace: 'false'
      AutoScalingScheduledAction:
        IgnoreUnmodifiedGroupSizeProperties: 'true'
      AutoScalingRollingUpdate:
        MaxBatchSize: !If [NoInstances ,!Ref 'AWS::NoValue', !Ref 'ClusterSize']
        WaitOnResourceSignals: true
  ClusterEIP:
    Type: AWS::EC2::EIP
    Condition: CreateInstances
{%- if createVpc %}
    DependsOn: [GatewayAttachment]
{%- endif %}
    Properties:
      Domain: vpc
  ClusterDNSRecord:
    Type: AWS::Route53::RecordSet
    Condition: CreateDNS
    Properties:
      HostedZoneId: !FindInMap
        - AccountLUT
        - !Ref 'AWS::AccountId'
        - HostedZoneId
      Name: !Sub [ '${CNAME}.${HostedZoneName}.',{HostedZoneName: !FindInMap [AccountLUT, !Ref 'AWS::AccountId', 'HostedZoneName'] }]
      Type: CNAME
      TTL: '60'
      ResourceRecords:
        - !If
          - CreateInstances
          - !Sub
            - "ec2-${IpDash}.${Domain}."
            - IpDash: !Join ['-', !Split [ '.', !Ref ClusterEIP ]]
              Domain: !If [IsUsEast1, 'compute-1.amazonaws.com', !Sub '${AWS::Region}.compute.amazonaws.com']
          - !FindInMap
            - AccountLUT
            - !Ref 'AWS::AccountId'
            - Failover
{%- if enableDnsFailover %}
      Failover: PRIMARY
      SetIdentifier: !Sub '${CNAME}-Primary'
      HealthCheckId: !Ref HealthCheck
    DependsOn: [ClusterEIP]
  ClusterDNSRecordSecondary:
    Type: AWS::Route53::RecordSet
    Condition: CreateDNS
    DependsOn: [ClusterDNSRecord]
    Properties:
      Failover: SECONDARY
      SetIdentifier: !Sub '${CNAME}-Secondary'
      HostedZoneId: !FindInMap
        - AccountLUT
        - !Ref 'AWS::AccountId'
        - HostedZoneId
      Name: !Sub
        - '${CNAME}.${HostedZoneName}.'
        - CNAME: !Ref 'CNAME'
          HostedZoneName: !FindInMap
            - AccountLUT
            - !Ref 'AWS::AccountId'
            - HostedZoneName
      Type: CNAME
      TTL: '60'
      ResourceRecords:
        - !FindInMap
          - AccountLUT
          - !Ref 'AWS::AccountId'
          - Failover
  HealthCheck:
    Type: AWS::Route53::HealthCheck
    DependsOn: [ClusterEIP]
    Condition: CreateDNS
    Properties:
      HealthCheckConfig:
        Type: "HTTPS"
        ResourcePath: "/assets/htmlFiles/login.html"
        IPAddress: !Ref ClusterEIP
        FullyQualifiedDomainName: !Sub
          - '${CNAME}.${HostedZoneName}'
          - CNAME: !Ref 'CNAME'
            HostedZoneName: !FindInMap
              - AccountLUT
              - !Ref 'AWS::AccountId'
              - HostedZoneName
        Port: "443"
        RequestInterval: "30"
        FailureThreshold: "3"
      HealthCheckTags:
        - Key: Name
          Value: !Ref 'CNAME'
        - Key: StackName
          Value: !Ref 'AWS::StackName'
{%- endif %}
  AssociateEIP:
    Type: AWS::EC2::EIPAssociation
    Condition: CreateInstances
    Properties:
      AllocationId: !GetAtt ClusterEIP.AllocationId
      NetworkInterfaceId: !Ref ClusterNIC
  ClusterNICSG:
    Type: AWS::EC2::SecurityGroup
    Condition: CreateInstances
    Properties:
      GroupDescription: Access between nodes, and HTTPS/SSH from the given CIDR.
      VpcId: !Ref 'VpcId'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref 'AllowedCIDR'
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: !Ref 'AllowedCIDR'
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: !Ref 'AllowedCIDR'
        - IpProtocol: tcp
          FromPort: 10000
          ToPort: 10000
          CidrIp: !Ref 'AllowedCIDR'
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-ClusterNICSG'
        - Key: StackName
          Value: !Ref 'AWS::StackName'
  ClusterNIC:
    Type: AWS::EC2::NetworkInterface
    Condition: CreateInstances
    Properties:
      SubnetId: !Ref Subnet
      Description: Interface for traffic from the internet
      GroupSet:
        - !Ref ClusterNICSG
      SourceDestCheck: true
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-ClusterNIC'
        - Key: StackName
          Value: !Ref 'AWS::StackName'
  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          setup:
            - configure_cfn
            - configure_app
          reload:
            - reconfigure_app
        configure_cfn:
          files:
{%- if enableLifecycle %}
            /etc/sysconfig/lifecycled:
              content: !Sub
                - |
                  AWS_DEFAULT_REGION=${AWS::Region}
                  AWS_REGION=${AWS::Region}
                  LIFECYCLED_HANDLER=/usr/bin/copylogs.sh
                  LIFECYCLED_SNS_TOPIC=${LifecycleHookTopic}
                  LIFECYCLE_HOOK_NAME=LifecycleTerminating
                  LOGBUCKET=${LogBucket}
                  LOGPREFIX=/logs/${AWS::AccountId}/${AWS::StackName}/
                - { LogBucket: !ImportValue sharedinf-logbucket }
              mode: '000400'
              owner: root
              group: root
            /usr/bin/copylogs.sh:
              content: !Sub |
                #!/bin/bash
                set -x
                echo "$(date +%TF%T%z) Running copylogs.sh" | logger --id -p "local0.info" -t copy-logs -s
                eval $(ec2-tags -s -i)
                source /etc/sysconfig/lifecycled
                export AWS_DEFAULT_REGION="${AWS::Region}"
                InstanceId=$(curl -s http://169.254.169.254/2018-09-24/meta-data/instance-id)
                S3Uri=${!LOGBUCKET}${!LOGPREFIX}${!InstanceId}
                for dir in /var/log /var/opt/xcalar /home/xcalar; do
                  aws s3 cp --recursive ${!dir}/ s3://${!S3Uri}${!dir}/ 2>&1 | logger --id -p "local0.info" -t copy-logs -s
                done
                aws autoscaling complete-lifecycle-action --lifecycle-action-result CONTINUE --instance-id ${!InstanceId} --lifecycle-hook-name $LIFECYCLE_HOOK_NAME --auto-scaling-group-name "$AWS_AUTOSCALING_GROUPNAME"
                exit 0
              mode: '000750'
              owner: root
              group: root
{%- endif %}
            /etc/cfn/hooks.d/cfn-asg-reloader.conf:
              content: !Sub |
                [cfn-asg-reloader-hook]
                triggers=post.update
                path=Resources.ClusterASG
                action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource LaunchTemplate --configsets reload --region ${AWS::Region}
                runas=root
              mode: '000400'
              owner: root
              group: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.LaunchTemplate.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource LaunchTemplate --configsets setup --region ${AWS::Region}
                runas=root
              mode: '000400'
              owner: root
              group: root
            /etc/cfn/cfn-hup.conf:
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
                verbose=true
                interval=1
              mode: '000400'
              owner: root
              group: root
          services:
            sysvinit:
              cfn-hup:
                enabled: 'true'
                ensureRunning: 'true'
                files:
                  - /etc/cfn/cfn-hup.conf
                  - /etc/cfn/hooks.d/cfn-auto-reloader.conf
                  - /etc/cfn/hooks.d/cfn-asg-reloader.conf
        configure_app:
          files:
            /opt/xcalar/xcalar-gui/assets/js/env/cloudEnv.js:
              content: const gCloud = true;
              mode: '000777'
              owner: root
              group: root
            /var/lib/cloud/instance/ec2.env:
              content: !Sub
                - |
                  AWS_DEFAULT_REGION=${AWS::Region}
                  AWS_REGION=${AWS::Region}
                  CLUSTER_NAME=${AWS::StackName}
                  BUCKET=${Bucket}
                  NFSHOST=${SharedRoot}
                  SUBNET=${Subnet}
                  CNAME=${CNAME}
                  NIC=${NIC}
                  HOSTEDZONEID=${HostedZoneId}
                  HOSTEDZONENAME=${HostedZoneName}
                  CERTSTORE=/xcalar/cloud/${HostedZoneName}
                  SHARED_CONFIG=${SharedConfig}
                  CGROUPS_ENABLED=${Cgroups}
{%- if enableLifecycle %}
                  LOGBUCKET=${LogBucket}
                  LOGPREFIX=/logs/${AWS::AccountId}/${AWS::StackName}/
{%- endif %}
                - SharedRoot: !If [CreateNewShare, !Ref EfsSharedRoot, !Ref ExistingShare]
                  Bucket: !If [CreateNewS3, !Ref S3Bucket, !Ref ExistingS3]
                  NIC: !If [CreateInstances, !Ref ClusterNIC, '']
                  HostedZoneId: !FindInMap
                    - AccountLUT
                    - !Ref 'AWS::AccountId'
                    - HostedZoneId
                  HostedZoneName: !FindInMap
                    - AccountLUT
                    - !Ref 'AWS::AccountId'
                    - HostedZoneName
{%- if enableLifecycle %}
                  LogBucket: !ImportValue sharedinf-logbucket
{%- endif %}
              mode: '000400'
              owner: root
              group: root
{%- if enableCloud %}
            /var/lib/cloud/instance/cloud.env:
              content: !Sub
                - |
                  AUTH_STACK_NAME=${AuthStack}
                  MAIN_STACK_NAME=${MainStack}
                  CLUSTER_SIZE=${CSize}
                - AuthStack: !Ref AuthStackName
                  MainStack: !Ref MainStackName
                  CSize: !Ref ClusterSize
              mode: '000400'
              owner: root
              group: root
{%- endif %}
            /var/lib/cloud/instance/bootstrap.sh:
              source: '{{ bootstrapUrl }}'
              mode: '000700'
              owner: root
              group: root
            /var/lib/cloud/instance/bootstrap-wrapper.sh:
              content: !Sub
                - |
                  #!/bin/bash
                  log()  {
                    logger --id -p "$1" -t bootstrap-wrapper.sh -s <<< "$2"
                  }
                  export PATH=/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/sbin:/bin:/opt/aws/bin
                  export AWS_DEFAULT_REGION=${AWS::Region}
                  # The ec2-tags utility prints instance tags as key=value pairs suitable for parsing from bash
                  AWS_AUTOSCALING_GROUPNAME="$(ec2-tags -s -i | tr -d "'" | awk -F'=' '/^AWS_AUTOSCALING_GROUPNAME/{print $2}')"
                  DESIREDCAP=$(aws autoscaling describe-auto-scaling-groups --auto-scaling-group-names "$AWS_AUTOSCALING_GROUPNAME" --query 'AutoScalingGroups[][DesiredCapacity]'  --output text)
                  bash /var/lib/cloud/instance/bootstrap.sh --admin-username "${AdminUsername}" --admin-password "${AdminPassword}" {% if enableLicense %}--license "${License}"{% endif %} \
                            --cluster-size "$DESIREDCAP" --tag-key "aws:autoscaling:groupName" --tag-value "$AWS_AUTOSCALING_GROUPNAME" --cluster-name "${AWS::StackName}" \
                            --bucket "${Bucket}" --cgroups "${Cgroups}" --shared-config "${SharedConfig}" --certstore /xcalar/cloud/${HostedZoneName} --nfs-mount "${SharedRoot}" --subnet "${Subnet}" --nic "${NIC}"
                  rc=$?
                  log local0.info "bootstrap.sh returned $rc"
                  /opt/aws/bin/cfn-signal -e $rc  --stack ${AWS::StackName} --resource ClusterASG --region ${AWS::Region}
                  exit $rc
                - SharedRoot: !If [CreateNewShare, !Ref EfsSharedRoot, !Ref ExistingShare]
                  Bucket: !If [CreateNewS3, !Ref S3Bucket, !Ref ExistingS3]
                  NIC: !If [CreateInstances, !Ref ClusterNIC, '']
                  HostedZoneName: !FindInMap
                    - AccountLUT
                    - !Ref 'AWS::AccountId'
                    - HostedZoneName
              mode: '000700'
              owner: root
              group: root
          commands:
            01_runbootstrap:
              cwd: /var/lib/cloud/instance
              command: /bin/bash /var/lib/cloud/instance/bootstrap-wrapper.sh
        reconfigure_app:
          commands:
            01_reconfig:
              cwd: /var/lib/cloud/instance
              command: /bin/bash /var/lib/cloud/instance/bootstrap-wrapper.sh
    Properties:
      LaunchTemplateName: !Sub '${AWS::StackName}-LaunchTemplate'
      LaunchTemplateData:
        InstanceType: !Ref 'InstanceType'
        IamInstanceProfile:
          Arn: !GetAtt 'IamInstanceProfile.Arn'
        NetworkInterfaces:
          - Description: Primary interface
            AssociatePublicIpAddress: !Ref 'AssociatePublicIpAddress'
            DeleteOnTermination: true
            DeviceIndex: 0
            SubnetId: !Ref 'Subnet'
            Groups:
              - !Ref 'ClusterSG'
        KeyName: !If [NoKeyName, !Ref 'AWS::NoValue', !Ref KeyName ]
        ImageId: !Ref 'ImageId'
        BlockDeviceMappings:
          - DeviceName: /dev/xvda
            Ebs:
              VolumeSize: !Ref 'RootSize'
              VolumeType: gp2
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            set +e
            log()  {
              logger --id -p "$1" -t user-data -s <<< "$2"
            }
            /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource LaunchTemplate --region ${AWS::Region} -c setup
            rc=$?
            log local0.info "Bootstrap returned $rc"
            /opt/aws/bin/cfn-signal -e $rc  --stack ${AWS::StackName} --resource ClusterASG --region ${AWS::Region}
            exit $rc
{%- if enableLifecycle %}
  LifecycleHookTopic:
    Type: AWS::SNS::Topic
  LifecycleHook:
    Type: AWS::AutoScaling::LifecycleHook
    Properties:
      AutoScalingGroupName: !Ref ClusterASG
      HeartbeatTimeout: 60
      DefaultResult: 'CONTINUE'
      LifecycleHookName: 'LifecycleTerminating'
      LifecycleTransition: "autoscaling:EC2_INSTANCE_TERMINATING"
      NotificationTargetARN: !Ref LifecycleHookTopic
      RoleARN: !GetAtt LifecycleHookRole.Arn
  LifecycleHookRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
                - autoscaling.amazonaws.com
      Path: /
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AutoScalingNotificationAccessRole'
{%- endif %}
  IamInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
      Path: /
      ## TODO: Why doesn't this policy exist?
      #      ManagedPolicyArns:
      #   - 'arn:aws:iam::aws:policy/service-role/AmazonSSMManagedInstanceCore'
      Policies:
        - PolicyName: ClusterPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ec2:DescribeInstances
                Resource:
                  - '*'
              - Effect: Allow
                Action:
                  - cloudformation:DescribeStackResource
                  - cloudformation:SignalResource
                Resource:
                  - '*'
              - Effect: Allow
                Action:
                  - ec2:CreateTags
                  - ec2:DeleteTags
                Resource: '*'
                Condition:
                  StringEquals:
                    ec2:ResourceTag/aws:cloudformation:stack-name: !Ref 'AWS::StackName'
              - Effect: Allow
                Action:
                  - ec2:DescribeNetworkInterfaces
                  - ec2:AttachNetworkInterface
                Resource:
                  - '*'
              - Effect: Allow
                Action:
                  - "autoscaling:*Scaling*"
                  - autoscaling:CompleteLifecycleAction
                  - autoscaling:RecordLifecycleActionHeartbeat
                Resource: '*'
                Condition:
                  StringEquals:
                    autoscaling:ResourceTag/aws:cloudformation:stack-name: !Ref 'AWS::StackName'
              - Effect: Allow
                Action:
                  - "autoscaling:Describe*Scaling*"
                Resource:
                  - '*'
              - Effect: Allow
                Action:
                  - elasticfilesystem:DescribeMountTargets
                Resource:
                  - '*'
              - Effect: Allow
                Action:
                  - s3:GetBucketLocation
                  - s3:ListBucket
                  - s3:ListBucketMultipartUploads
                  - s3:HeadBucket
                Resource: !Sub
                  - 'arn:aws:s3:::${Bucket}'
                  - Bucket: !If [CreateNewS3, !Ref S3Bucket, !Ref ExistingS3]
              - Effect: Allow
                Action:
                  - s3:AbortMultipartUpload
                  - s3:DeleteObject
                  - s3:GetObject
                  - s3:ListMultipartUploadParts
                  - s3:ListBucket
                  - s3:PutObject
                Resource:
                  - !Sub
                    - 'arn:aws:s3:::${Bucket}/*'
                    - Bucket: !If [CreateNewS3, !Ref S3Bucket, !Ref ExistingS3]
{%- if enableLifecycle %}
                  - !Sub
                    - 'arn:aws:s3:::${LogBucket}/logs/${AccountId}/${StackName}/*'
                    - LogBucket: !ImportValue sharedinf-logbucket
                      AccountId: !Ref AWS::AccountId
                      StackName: !Ref AWS::StackName
{%- endif %}
              - Effect: Allow
                Action:
                  - route53:GetChange
                  - route53:ListHostedZonesByName
                Resource:
                  - '*'
              - Effect: Allow
                Action:
                  - route53:ChangeResourceRecordSets
                Resource: !Sub
                  - 'arn:aws:route53:::hostedzone/${HostedZoneId}'
                  - HostedZoneId: !FindInMap
                    - AccountLUT
                    - !Ref 'AWS::AccountId'
                    - HostedZoneId
              - Effect: Allow
                Action:
                  - ssm:GetParametersByPath
                  - ssm:GetParameters
                  - ssm:GetParameter
                Resource:
                  - 'arn:aws:ssm:*:*:parameter/xcalar/cloud/*'
              - Effect: Allow
                Action:
                  - kms:Decrypt
                  - kms:DescribeKey
                Resource:
                  - 'arn:aws:kms:*:*:alias/aws/ssm'
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:UpdateItem
                  - dynamodb:DescribeTable
                Resource:
                  - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${SessionTable}'

{%- if enableLifecycle %}
              - Effect: Allow
                Action:
                  - sns:Subscribe
                  - sns:Unsubscribe
                Resource:
                  - !Ref 'LifecycleHookTopic'
              - Effect: Allow
                Action:
                  - 'sqs:*'
                Resource:
                  - !Sub 'arn:aws:sqs:${AWS::Region}:${AWS::AccountId}:lifecycled-*'
{%- endif %}
  IamInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref 'IamInstanceRole'

Outputs:
  URL:
    Condition: CreateDNS
    Description: URL of your new Xcalar Cluster
    Value: !If
      - CreateInstances
      - !Join ["", ["https://",!Ref 'ClusterEIP']]
      - !Join ["", ["https://",!Ref 'ClusterDNSRecord']]

  VanityURL:
    Description: Vanity URL for your Xcalar Cluster
    Condition: CreateDNS
    Value: !Join ["", ["https://",!Ref 'ClusterDNSRecord']]

    #  EIP:
    #    Description: Cluster ElasticIP
    #    Value: !Ref 'ClusterEIP'
{%- if createVpc %}
  VpcId:
    Description: VPC
    Value: !Ref 'VpcId'
  Subnet:
    Description: Subnet
    Value: !Ref 'Subnet'
{%- endif %}
  S3Bucket:
    Description: User S3 Bucket
    Value: !Ref S3Bucket
    Condition: CreateNewS3
  EfsSharedRoot:
    Description: Xcalar Shared Root
    Value: !Ref EfsSharedRoot
    Condition: CreateNewShare
  EfsMountTarget:
    Description: Xcalar Shared Root Mount Target
    Value: !Ref EfsMountTarget
  ClusterASG:
    Description: Cluster Autoscaling Group
    Value: !Ref ClusterASG
  ClusterSG:
    Description: Cluster Security Group
    Value: !Ref ClusterSG
  LaunchTemplate:
    Description: Launch template for cluster
    Value: !Ref LaunchTemplate
# vim: ft=yaml
