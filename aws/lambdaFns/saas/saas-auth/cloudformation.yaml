---
AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Serverless Express Application/API powered by API Gateway and Lambda
Resources:
  ApiGatewayApi:
    Type: AWS::Serverless::Api
    Properties:
      DefinitionUri: ./simple-proxy-api.yaml
      StageName: prod
      Variables:
        ServerlessExpressLambdaFunctionName: !Ref YOUR_SERVERLESS_EXPRESS_LAMBDA_FUNCTION_NAME

  DynamoDBSessionTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: YOUR_DYNAMODB_SESSION_TABLE_NAME
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      BillingMode: 'PAY_PER_REQUEST'

  DynamoDBUserTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: YOUR_DYNAMODB_USER_TABLE_NAME
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      BillingMode: 'PAY_PER_REQUEST'

  DynamoDBCredsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: YOUR_DYNAMODB_CREDS_TABLE_NAME
      KeySchema:
        - AttributeName: userid
          KeyType: HASH
        - AttributeName: sessionID
          KeyType: RANGE
      AttributeDefinitions:
        - AttributeName: userid
          AttributeType: S
        - AttributeName: sessionID
          AttributeType: S
      BillingMode: 'PAY_PER_REQUEST'

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: root
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: arn:aws:logs:*:*:*
      - PolicyName: sessionStoreAccess
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
              - dynamodb:GetItem
              - dynamodb:Query
              - dynamodb:PutItem
              - dynamodb:UpdateItem
              - dynamodb:DeleteItem
              - dynamodb:CreateTable
              - dynamodb:Scan
            Resource: !GetAtt DynamoDBSessionTable.Arn
      - PolicyName: userListAccess
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
              - dynamodb:GetItem
              - dynamodb:Query
              - dynamodb:PutItem
              - dynamodb:UpdateItem
              - dynamodb:DeleteItem
              - dynamodb:CreateTable
              - dynamodb:Scan
            Resource: !GetAtt DynamoDBUserTable.Arn
      - PolicyName: credsAccess
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
              - dynamodb:GetItem
              - dynamodb:Query
              - dynamodb:PutItem
              - dynamodb:UpdateItem
              - dynamodb:DeleteItem
              - dynamodb:CreateTable
              - dynamodb:Scan
            Resource: !GetAtt DynamoDBCredsTable.Arn

  SessionTableAccessRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          Effect: Allow
          Principal:
            Service: ec2.amazonaws.com
          Action: sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: sessionStoreAccess
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
              - dynamodb:GetItem
              - dynamodb:Query
              - dynamodb:PutItem
              - dynamodb:UpdateItem
              - dynamodb:DeleteItem
            Resource: !GetAtt DynamoDBSessionTable.Arn

  LambdaApiGatewayExecutionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt YOUR_SERVERLESS_EXPRESS_LAMBDA_FUNCTION_NAME.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
        - ''
        - - 'arn:aws:execute-api:'
          - !Ref AWS::Region
          - ":"
          - !Ref AWS::AccountId
          - ":"
          - !Ref ApiGatewayApi
          - "/*/*"

  YOUR_SERVERLESS_EXPRESS_LAMBDA_FUNCTION_NAME:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./
      Handler: lambda.handler
      MemorySize: 1024
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: nodejs10.x
      Timeout: 30
      Events:
        ProxyApiRoot:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /
            Method: ANY
        ProxyApiGreedy:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /{proxy+}
            Method: ANY

  LambdaConfigurationInformation:
     Type: AWS::SSM::Parameter
     Properties:
       Name: '/xcalar/cloud/auth/AwsServerlessExpressStack'
       Type: String
       Value: !Join
         - ''
         - - "XCE_CLOUD_MODE=1\n"
           - "XCE_CLOUD_SESSION_TABLE=YOUR_DYNAMODB_SESSION_TABLE_NAME\n"
           - "XCE_CLOUD_USER_POOL_ID=YOUR_USER_POOL_ID\n"
           - "XCE_CLOUD_CLIENT_ID=YOUR_CLIENT_ID\n"
           - "XCE_SAAS_AUTH_LAMBDA_URL="
           - https://
           - !Ref ApiGatewayApi
           - ".execute-api."
           - !Ref AWS::Region
           - ".amazonaws.com/prod/"
           - "\nXCE_CLOUD_REGION="
           - !Ref AWS::Region
           - "\nXCE_CLOUD_PREFIX=xc\nXCE_CLOUD_HASH_KEY=id\n"

Outputs:
  LambdaFunctionConsoleUrl:
    Description: Console URL for the Lambda Function.
    Value: !Join
      - ''
      - - https://
        - !Ref AWS::Region
        - ".console.aws.amazon.com/lambda/home?region="
        - !Ref AWS::Region
        - "#/functions/"
        - !Ref YOUR_SERVERLESS_EXPRESS_LAMBDA_FUNCTION_NAME

  ApiGatewayApiConsoleUrl:
    Description: Console URL for the API Gateway API's Stage.
    Value: !Join
      - ''
      - - https://
        - !Ref AWS::Region
        - ".console.aws.amazon.com/apigateway/home?region="
        - !Ref AWS::Region
        - "#/apis/"
        - !Ref ApiGatewayApi
        - "/stages/prod"

  ApiUrl:
    Description: Invoke URL for your API. Clicking this link will perform a GET request
      on the root resource of your API.
    Value: !Join
      - ''
      - - https://
        - !Ref ApiGatewayApi
        - ".execute-api."
        - !Ref AWS::Region
        - ".amazonaws.com/prod/"

  SessionStoreRoleArn:
    Description: Arn of the role that can be used to access the session store table
    Value: !GetAtt SessionTableAccessRole.Arn
