#!/bin/bash
# DO NOT EDIT! THIS FILE IS AUTOGENERATED BY bin/docker2bash.sh!
# Make your changes to $XLRDIR/docker/ub14/ub14-build/Dockerfile
# and run build config to generate this file and submit it with
# your Dockerfile changes

DOCKERPWD=$PWD
DOCKERUSER="$(id -un)"
SRCDIR=$PWD
if [ $(id -u) -ne 0 ]; then
    sudo "$0" "$@"
    exit $?
fi
if [ -z "$REFRESHED_ON" ]; then
    echo >&2 'WARNING: $REFRESHED_ON not specified in the environment!'
    REFRESHED_ON="2020-06-19-1"
fi
if [ -z "$EL7_MIRROR_URL" ]; then
    echo >&2 'WARNING: $EL7_MIRROR_URL not specified in the environment!'
    EL7_MIRROR_URL="http://netstore/isos/centos/7"
fi
if [ -z "$XCALAR_REPOPKG_ORG" ]; then
    echo >&2 'WARNING: $XCALAR_REPOPKG_ORG not specified in the environment!'
    XCALAR_REPOPKG_ORG="http://repo.xcalar.net"
fi
if [ -z "$XCALAR_REPOPKG_URL" ]; then
    echo >&2 'WARNING: $XCALAR_REPOPKG_URL not specified in the environment!'
    XCALAR_REPOPKG_URL="http://repo.xcalar.net"
fi
if [ -z "$XCALAR_DOCKER_VERSION" ]; then
    echo >&2 'WARNING: $XCALAR_DOCKER_VERSION not specified in the environment!'
    XCALAR_DOCKER_VERSION=""
fi
if [ -z "$XCALAR_CLANG_VERSION" ]; then
    echo >&2 'WARNING: $XCALAR_CLANG_VERSION not specified in the environment!'
    XCALAR_CLANG_VERSION=""
fi
if [ -z "$XCALAR_PYTHON_VERSION" ]; then
    echo >&2 'WARNING: $XCALAR_PYTHON_VERSION not specified in the environment!'
    XCALAR_PYTHON_VERSION=""
fi
if [ -z "$XCALAR_GRPC_VERSION" ]; then
    echo >&2 'WARNING: $XCALAR_GRPC_VERSION not specified in the environment!'
    XCALAR_GRPC_VERSION=""
fi
if [ -z "$LIBARCHIVE_VERSION" ]; then
    echo >&2 'WARNING: $LIBARCHIVE_VERSION not specified in the environment!'
    LIBARCHIVE_VERSION=""
fi
if [ -z "$XCALAR_THRIFT_VERSION" ]; then
    echo >&2 'WARNING: $XCALAR_THRIFT_VERSION not specified in the environment!'
    XCALAR_THRIFT_VERSION="0.10.0-28"
fi
if [ -z "$XCALAR_ARROW_VERSION" ]; then
    echo >&2 'WARNING: $XCALAR_ARROW_VERSION not specified in the environment!'
    XCALAR_ARROW_VERSION=""
fi
if [ -z "$CONTAINER_UID" ]; then
    echo >&2 'WARNING: $CONTAINER_UID not specified in the environment!'
    CONTAINER_UID="1000"
fi
if [ -z "$CONTAINER_GID" ]; then
    echo >&2 'WARNING: $CONTAINER_GID not specified in the environment!'
    CONTAINER_GID="1000"
fi
if [ -z "$CONTAINER_USER" ]; then
    echo >&2 'WARNING: $CONTAINER_USER not specified in the environment!'
    CONTAINER_USER="xcalardev"
fi
if [ -z "$CONTAINER_HOME" ]; then
    echo >&2 'WARNING: $CONTAINER_HOME not specified in the environment!'
    CONTAINER_HOME="/home/xcalardev"
fi
if [ -z "$SHARED_CACHE" ]; then
    echo >&2 'WARNING: $SHARED_CACHE not specified in the environment!'
    SHARED_CACHE="/var/opt/cache"
fi
rm -f /etc/profile.d/buildenv.sh
set -ex
# ARG CENTOS7
# FROM $CENTOS7
# ARG CENTOS7

# ARG REFRESHED_ON=2020-06-19-1
# ENV REFRESHED_ON=$REFRESHED_ON

## Install local mirror if available
# ARG EL7_MIRROR_URL=http://netstore/isos/centos/7
# ENV EL7_MIRROR_URL=$EL7_MIRROR_URL
cd $DOCKERPWD && cd /etc/yum.repos.d && if curl -fsSL $EL7_MIRROR_URL/centos-mirror.repo -O; then echo $EL7_MIRROR_URL >/etc/yum/vars/mirrorurl && rm -fv $(ls /etc/yum.repos.d/CentOS-*.repo | grep -v Base) && sed -i -r '/enabled/d; s/^\[([a-z]+)]/\[\1]\nenabled=0/' CentOS-Base.repo; else yum install -y epel-release; fi
echo 'exclude=kernel kernel-debug* kernel-tools* linux-firmware microcode_ctl *.i?86 *.i686' >>/etc/yum.conf && echo 'sslverify=false' >>/etc/yum.conf && yum clean all --enablerepo='*' && rm -rf /var/cache/yum/* || exit $?

cd $DOCKERPWD && yum install -y initscripts sudo curl gzip yum-utils ca-certificates pam && yum clean all --enablerepo='*' && rm -rf /var/cache/yum && (groupadd --system sudo || true) && mkdir -m 0750 -p /etc/sudoers.d && echo '%sudo ALL=(ALL) NOPASSWD:ALL' >/etc/sudoers.d/99-sudo && chmod 0440 /etc/sudoers.d/99-sudo || exit $?

cd $DOCKERPWD && yum install -y git222-core libxml2-devel mysql-devel readline-devel gcc gcc-c++ wget rpm-build make libaio-devel libevent-devel glib2-devel libedit-devel libcurl-devel libunwind-devel libicu-devel zip unzip bzip2-devel ruby-devel ruby rubygems rubygem-bundler libcap-devel which xz-devel libstdc++-static rpmdevtools libxslt-devel snappy snappy-devel nmap-ncat unixODBC-devel createrepo vim-enhanced psmisc cyrus-sasl cyrus-sasl-gssapi cyrus-sasl-md5 cyrus-sasl-devel krb5-devel krb5-workstation bc xmlsec1-devel mysql psmisc mariadb-server rsync xz-compat-libs bash-completion cronie psutils procps-ng libcgroup-tools sysstat && yum install -y libbsd-devel jq pigz pbzip2 freetds-devel fakeroot && ln -s /usr/include/editline/readline.h /usr/include/editline.h && rpmdev-setuptree && yum clean all --enablerepo='*' && rm -rf /var/cache/yum/* /var/tmp/yum* || exit $?

# ARG XCALAR_REPOPKG_ORG=http://repo.xcalar.net
# ARG XCALAR_REPOPKG_URL=http://netstore.int.xcalar.com/infra/repo.xcalar.net
# ARG XCALAR_DOCKER_VERSION

cd $DOCKERPWD && curl -fsSL ${XCALAR_REPOPKG_URL}/deps/docker-${XCALAR_DOCKER_VERSION}.tgz | tar zxf - -C /usr/bin --strip-components=1 docker/docker && curl -L -f ${XCALAR_REPOPKG_URL}/deps/docker-completion.bash -o /usr/share/bash-completion/completions/docker --create-dirs || exit $?

cd $DOCKERPWD && curl -f ${XCALAR_REPOPKG_URL}/xcalar-ca.crt -o /etc/pki/ca-trust/source/anchors/xcalar-ca.pem && update-ca-trust extract && curl -f ${XCALAR_REPOPKG_URL}/rpm-deps/xcalar-deps.repo -o /etc/yum.repos.d/xcalar-deps.repo && curl -f ${XCALAR_REPOPKG_URL}/rpm-deps/xcalar-deps-common.repo -o /etc/yum.repos.d/xcalar-deps-common.repo && curl -f ${XCALAR_REPOPKG_URL}/RPM-GPG-KEY-Xcalar -o /etc/pki/rpm-gpg/RPM-GPG-KEY-Xcalar && sed -i "s@${XCALAR_REPOPKG_ORG}@${XCALAR_REPOPKG_URL}@g" /etc/yum.repos.d/xcalar*.repo && yum install --enablerepo='xcalar*' -y tini su-exec ninja-build mapr-client sbt wamerican phantomjs optcmake3 castxml ccache && yum clean all --enablerepo='*' && rm -rf /var/cache/yum/* || exit $?

# ARG XCALAR_CLANG_VERSION
cd $DOCKERPWD && yum install --enablerepo='xcalar-deps' --enablerepo='xcalar-deps-common' -y optclang${XCALAR_CLANG_VERSION} && for prog in llvm-cov llvm-profdata clang clang++ lldb clang-format; do ln -sfn /opt/clang${XCALAR_CLANG_VERSION:0:1}/bin/$prog /usr/local/bin/; done && yum clean all --enablerepo='*' && rm -rf /var/cache/yum/* || exit $?

# ARG XCALAR_PYTHON_VERSION
cd $DOCKERPWD && yum install -y --enablerepo='xcalar-deps' --enablerepo='xcalar-deps-common' --disableplugin='priorities' ${XCALAR_REPOPKG_URL}/rpm/xcalar-python36/xcalar-python36-${XCALAR_PYTHON_VERSION}.x86_64.rpm && yum clean all --enablerepo='*' && rm -rf /var/cache/yum/* /var/tmp/yum* || exit $?

# ARG XCALAR_GRPC_VERSION
# ARG LIBARCHIVE_VERSION
cd $DOCKERPWD && yum install --enablerepo='xcalar-deps' --enablerepo='xcalar-deps-common' -y xcalar-node10 xcalar-antlr xcalar-caddy xcalar-jemalloc xcalar-grpc-${XCALAR_GRPC_VERSION} libarchive-static-${LIBARCHIVE_VERSION} jansson-static cryptopp-static editline-devel && yum clean all --enablerepo='*' && rm -rf /var/cache/yum/* || exit $?

# ARG XCALAR_THRIFT_VERSION=0.10.0-28
# ARG XCALAR_ARROW_VERSION

cd $DOCKERPWD && yum install -y --enablerepo='xcalar-*' --disableplugin='priorities' xcalar-thrift-${XCALAR_THRIFT_VERSION} xcalar-thrift-devel-${XCALAR_THRIFT_VERSION} xcalar-arrow-libs-${XCALAR_ARROW_VERSION} xcalar-arrow-${XCALAR_ARROW_VERSION} boost-devel optgdb8 polkit vte-profile optmaven3 && ln -sfn /opt/gdb8/bin/gdb /usr/local/bin/gdb && yum clean all --enablerepo='*' && rm -rf /var/cache/yum/* || exit $?

cd $DOCKERPWD && yum install -y --enablerepo='xcalar-deps-common' jdk1.8 docker-compose vault awscliv2 && yum clean all --enablerepo='*' && rm -rf /var/cache/yum/* || exit $?

# XD's test engier (puppeteer) dependency packages
cd $DOCKERPWD && yum install -y pango.x86_64 libXcomposite.x86_64 libXcursor.x86_64 libXdamage.x86_64 libXext.x86_64 libXi.x86_64 libXtst.x86_64 cups-libs.x86_64 libXScrnSaver.x86_64 libXrandr.x86_64 GConf2.x86_64 alsa-lib.x86_64 atk.x86_64 gtk3.x86_64 ipa-gothic-fonts xorg-x11-fonts-100dpi xorg-x11-fonts-75dpi xorg-x11-utils xorg-x11-fonts-cyrillic xorg-x11-fonts-Type1 xorg-x11-fonts-mc pbzip2 && curl -fssL http://repo.xcalar.net/rpm-deps/google-chrome.repo | tee /etc/yum.repos.d/google-chrome.repo && curl -fsSO https://dl.google.com/linux/linux_signing_key.pub && rpm --import linux_signing_key.pub && rm linux_signing_key.pub && yum install -y google-chrome-stable && yum localinstall -y http://netstore/infra/packages/chromedriver-2.34-2.el7.x86_64.rpm && yum install -y Xvfb && yum clean all && rm -rf /var/cache/yum/* /var/tmp/yum* || exit $?

# ENV JAVA_HOME=/usr/java/latest PATH=/opt/xcalar/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/sbin:/bin:${JAVA_HOME}/bin

cd $DOCKERPWD && localedef -i en_US -f UTF-8 en_US.UTF-8 || exit $?
# ENV LANG en_US.UTF-8
# ENV LANGUAGE en_US.UTF-8
# ENV LC_ALL en_US.UTF-8

# ARG CONTAINER_UID=1000
# ENV CONTAINER_UID=$CONTAINER_UID

# ARG CONTAINER_GID=1000
# ENV CONTAINER_GID=$CONTAINER_GID

# ENV UGID=${CONTAINER_UID}:${CONTAINER_GID}

# ARG CONTAINER_USER=xcalardev
# ENV CONTAINER_USER=$CONTAINER_USER

# ARG CONTAINER_HOME=/home/xcalardev
# ENV CONTAINER_HOME=$CONTAINER_HOME

# ARG SHARED_CACHE=/var/opt/cache
# ENV SHARED_CACHE=$SHARED_CACHE

#cd $SRCDIR && cp -a docker/rootfs/ / && cd - || exit $?
#cd $DOCKERPWD && XTRACE=1 /docker-entrypoint.sh fixups || exit $?

# ENTRYPOINT ["/docker-entrypoint.sh"]

# ENV container=docker

#STOPSIGNAL SIGRTMIN+3

# EXPOSE 8443 9515

# CMD ["/usr/sbin/init"]
#Entrypoint CMD
# "/docker-entrypoint.sh"  "/usr/sbin/init"
exit 0
